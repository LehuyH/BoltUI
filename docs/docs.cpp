#include "boltui.hpp"

using namespace std;

UI ui;

int main(){
	ui << ui.markdown("#  BoltUI ⚡\n\nBoltUI simplifies the creation of graphical user interfaces (GUIs) in C++ by redirecting program output to a web-based interface. This package aims to provide a seamless experience for new C++ developers by replacing `iostream` functionalities like `cout` and `cin` with web-based UI components.\n\n## Why Use BoltUI?\n\n \n-  **Simplified UI Creation:** Easily redirect C++ output to a web interface.\n\n- **Cross-Platform:** With WebAssembly, your BoltUI program can run across all modern browsers.\n\n-  **Developer-Friendly:** Reduce friction for new C++ developers entering the realm of GUI development.\n\n-  **Rich Outputs:** Incorporate images, markdown formatting, and user interactions within the C++ program output.\n\n  \n\n## 🛠️ Installation\n\n  \n\n### Prerequisites\n\n1.  **Emscripten:** Install [Emscripten](https://emscripten.org/docs/getting_started/downloads.html) to compile C++ to WebAssembly.\n\n  \n\n### Steps\n\n  \n\n1.  **Clone the Repository:**  `git clone https://github.com/LehuyH/boltui.git`\n\n2.  **Include `boltui.hpp`:** Add `#include \"boltui.hpp\"` in your C++ project.\n\n  \n## 🚀 Quick Start Example\n\n```\n#include<iostream>\n#include<iomanip>\n#include \"boltui.hpp\"\n\nusing namespace std;\n\nint main(){\n    UI ui;\n    \n    ui << ui.markdown(\"# Hello, welcome to the Cat Shop!\") << endl;\n\n    ui << ui.markdown(\"## Who do you want to adopt ?\") << endl;\n    \n    ui.font(\"monospace\");\n    ui << ui.setw(20) << \"Whiskers\" << ui.setw(20) <<\n    ui.image(\"http://placekitten.com/300/200\") \n    << endl;\n    \n    ui << endl << \" \" << endl << \" \" << endl;\n\n    ui << ui.setw(20) << \"Meowtastic\" << ui.setw(20) <<\n    ui.image(\"http://placekitten.com/200/200\") \n    << endl;\n\n    ui << endl << \" \" << endl << \" \" << endl;\n    ui.font(\"sans\");\n\n    return 0;\n}\n```\n\nOutputs the following:\n![Quick Start Example](/.github/quickstart.png)\n\n## 🧰 Usage\n\nBoltUI provides a set of functionalities to streamline C++ console output and interaction. \nFirst create a new instance of the `UI` class like so:\n```\nUI ui;\n```\n\nNow, you can use all of BoltUI\'s feature. Here are some common functions and their usage:\n\n### Output Functions\n\n- `UI& operator<<(const std::string& input)`: Outputs a string to the UI.\n```\nui << \"Hello, World!\";\n```\n\n- `UI& operator<<(int input)`: Outputs an integer to the UI.\n```\nint num = 42;\n  ui << num;\n```\n\n- `UI& operator<<(float input)`: Outputs a float number to the UI.\n```\nfloat value = 3.14f;\n  ui << value;\n```\n\n- `UI& operator<<(bool input)`: Outputs a boolean value to the UI.\n```\nbool status = true;\n  ui << status;\n```\n\n### Input Functions\n\n- `UI& operator>>(std::string& input)`: Reads a line of text from the UI.\n```\nstring userInput;\n  ui >> userInput;\n```\n\n- `UI& operator>>(int& num)`: Reads an integer value from the UI.\n```\nint number;\n  ui >> number;\n```\n\n- `UI& operator>>(float& num)`: Reads a float value from the UI.\n```\nfloat value;\n  ui >> value;\n```\n\n- `UI& operator>>(bool& num)`: Reads a boolean value from the UI.\n```\nbool status;\n  ui >> status;\n```\n\n### Formatting Functions\n\n- `UI& setw(int width)`: Sets the field width for the next output.\n```\nui.setw(10) << \"Field Width\";\n```\n\n- `UI& setfill(const std::string& input)`: Sets the fill character for the next output.\n```\nui.setfill(\'*\') << \"Filled Text\";\n```\n\n- `UI& getline(std::string& input)`: Reads a line of text from the UI and stores it in the given string.\n```\nstring userInput;\n  ui.getline(userInput);\n```\n\n### Special Functions\n\n- `UI& markdown(std::string input)`: Renders a Markdown-formatted string in the UI.\n```\nui.markdown(\"# Title\\n## Subtitle\\n- Bullet point 1\\n- Bullet point 2\");\n```\n\n- `UI& image(std::string input)`: Displays an image in the UI using its URL.\n```\nui.image(\"https://example.com/image.png\");\n```\n\n## 🔨 Build\n\nTo compile and build your C++ code with BoltUI, follow these steps:\n\n1. Run the following command in your terminal:\n\n```sh\nem++ boltui.cpp (ADD OTHER SOURCE FILES HERE) -s WASM=1 -o ./dist/main.js -s EXPORTED_RUNTIME_METHODS=getValue -s NO_EXIT_RUNTIME=1 -s DEFAULT_LIBRARY_FUNCS_TO_INCLUDE=\'$stringToNewUTF8\' -s ASYNCIFY\n```\n\nReplace `(ADD OTHER SOURCE FILES HERE)` with any additional source files your project requires.\n\n2. This command will generate the necessary output in the `./dist` directory.\n\n3. You can then upload the contents of the `./dist` folder to any static hosting service to run your application.\n\n## 📜 License\n\nBoltUI is licensed under the [MIT License](LICENSE).");
	return 0;
}